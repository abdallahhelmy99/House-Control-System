(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  
  type integer  = <range -2147483648 2147483647>
  
  function   first () requires { True } ensures  { True } returns
    int = -2147483648
  
  function   last () requires { True } ensures  { True } returns
    int = 2147483647
  
  function   in_range (x : int) requires { True } ensures  { True } returns
     = ((first <= x) /\ (x <= last))
  
  clone export ada__model.Static_Discrete with axiom . type t = integer,
    function first = first, function last = last,
    predicate in_range = in_range
  
  type integer__ref  = { mutable integer__content : integer }
  
  function   integer__ref_integer__content__projection (a : integer__ref)
    requires {  } ensures  {  } returns integer = a.integer__content
  
  meta model_projection function integer__ref_integer__content__projection
  
  meta inline:no function integer__ref_integer__content__projection
  
  function   integer__havoc (x : integer__ref) requires {  } ensures  {  }
    returns unit

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        Standard__integer
  
  function   dynamic_invariant
    (([mlw:proxy_symbol] [introduced] temp___expr_18) : int
    ([mlw:proxy_symbol] [introduced] temp___is_init_14) : bool
    ([mlw:proxy_symbol] [introduced] temp___skip_constant_15) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_toplevel_16) : bool
    ([mlw:proxy_symbol] [introduced] temp___do_typ_inv_17) : bool) requires
    { True } ensures  { True } returns
     = (if
       ((([mlw:proxy_symbol] [introduced] temp___is_init_14) = True) \/
          (Standard__integer.first <= Standard__integer.last))
       then
       (Standard__integer.dynamic_property Standard__integer.first
          Standard__integer.last ([mlw:proxy_symbol]
          [introduced] temp___expr_18))
       )
  
  function   default_initial_assumption
    (([mlw:proxy_symbol] [introduced] temp___expr_19) : int
    ([mlw:proxy_symbol] [introduced] temp___skip_top_level_20) : bool)
    requires { True } ensures  { True } returns  = True

end

(* Module for defining a ref holding the value of variable "num_modules" defined at spacecontrolsystem.ads:26, created in Gnat2Why.Decls.Translate_Variable *)
module Spacecontrolsystem__num_modules
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  val num_modules [model_projected] [name:Num_Modules]
  [model_trace:1204] [sloc:spacecontrolsystem.ads:26]: int

end

(* Module giving an empty axiom for the entity "num_modules" defined at spacecontrolsystem.ads:26, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Spacecontrolsystem__num_modules___axiom
  
  use import _gnatprove_standard.Main
  use import int.Int
  
  

end

(* Module for checking contracts and absence of run-time errors in subprogram "remove_last_module_from_station" defined at spacecontrolsystem.ads:53, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Spacecontrolsystem__remove_last_module_from_station__subprogram_def
  
  use import _gnatprove_standard.Main
  use import int.Int
  use import int.Int
  use        _gnatprove_standard.Main
  use        Standard__integer
  use        Standard__integer___axiom
  use        Spacecontrolsystem__num_modules
  use        Standard__integer___axiom
  use        Standard__integer___axiom
  use        Spacecontrolsystem__num_modules___axiom
  
  function [GP_Subp:spacecontrolsystem.ads:53]
    [sloc:spacecontrolsystem.ads:53] def (__void_param : unit) requires
    { True } ensures  {  } returns
     = (* Assume dynamic invariants of inputs of the subprogram spacecontrolsystem.ads:53 *);
        assume
        { (Standard__integer___axiom.dynamic_invariant
             !Spacecontrolsystem__num_modules.num_modules True False True
             True) };
        (* Assume moved pointers in outputs of the subprogram spacecontrolsystem.ads:53 *);
        (* Check for RTE in the Pre of the subprogram spacecontrolsystem.ads:53 *);
        abstract ensures
        { True } begin  (let _ = True in ())  end;
        (* Assume Pre of the subprogram spacecontrolsystem.ads:53 *);
        (try
        ();
          ([GP_Sloc:spacecontrolsystem.adb:106:10] ([sloc:spacecontrolsystem.adb:106] ()));
          ([GP_Sloc:spacecontrolsystem.adb:106:7] ([sloc:spacecontrolsystem.adb:106] 
                                                  (if
                                                  ([sloc:spacecontrolsystem.adb:106] ([branch_id=976]
                                                  _gnatprove_standard.Main.spark__branch
                                                  :=
                                                  (!Spacecontrolsystem__num_modules.num_modules
                                                     > 0)));
                                                  ([branch_id=976] _gnatprove_standard.Main.spark__branch).bool__content
                                                  then
                                                  ();
                                                  ([GP_Sloc:spacecontrolsystem.adb:107:10] 
                                                  ([sloc:spacecontrolsystem.adb:107] ()));
                                                  ([GP_Sloc:spacecontrolsystem.adb:107:25] 
                                                  ([sloc:spacecontrolsystem.adb:107] ()));
                                                  ([GP_Sloc:spacecontrolsystem.adb:107:22] 
                                                  ([sloc:spacecontrolsystem.adb:107] (
                                                  Spacecontrolsystem__num_modules.num_modules
                                                  :=
                                                  ( ([sloc:spacecontrolsystem.adb:107] 
                                                    ([GP_Sloc:spacecontrolsystem.adb:107:37]
                                                    [vc:annotation]
                                                    [GP_Reason:VC_OVERFLOW_CHECK]
                                                    [GP_Shape:if__num_modules_assign__sub]
                                                    [GP_Id:9]
                                                    [comment:         Num_Modules := Num_Modules - 1;                                     ^ spacecontrolsystem.adb:107:37:VC_OVERFLOW_CHECK] (
                                                    Standard__integer.range_check_
                                                      (!Spacecontrolsystem__num_modules.num_modules
                                                         - 1))))))))
                                                   else
                                                  ();
                                                  ([GP_Sloc:spacecontrolsystem.adb:109:10] 
                                                  ([sloc:spacecontrolsystem.adb:109] raise Return__exc)))));
          raise Return__exc with | Return__exc  -> ());
        abstract ensures { True } begin  (let _ = True in ())  end

end
