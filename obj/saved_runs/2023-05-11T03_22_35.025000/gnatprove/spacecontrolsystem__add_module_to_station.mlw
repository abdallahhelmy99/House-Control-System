module Standard__integer
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type integer = <range -2147483648 2147483647>
  
  val function first : int
    ensures { result = ((- 2147483648) : int) }
  
  val function last : int
    ensures { result = (2147483647 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = integer,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type integer__ref = { mutable integer__content : integer }
  
  function integer__ref_integer__content__projection (a: integer__ref) : integer =
    a.integer__content
  
  meta "model_projection" function integer__ref_integer__content__projection
  
  meta "inline:no" function integer__ref_integer__content__projection
  
  val integer__havoc (x: integer__ref) : unit
    writes { x }
end

module Standard__integer___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Standard__integer as Standard__integer
  
  predicate dynamic_invariant (temp___expr_18: int) (temp___is_init_14: bool) (temp___skip_constant_15: bool) (temp___do_toplevel_16: bool) (temp___do_typ_inv_17: bool) =
    if ((temp___is_init_14 = True) \/
          (Standard__integer.first <= Standard__integer.last)) then
      (((Standard__integer.dynamic_property Standard__integer.first)
          Standard__integer.last)
         temp___expr_18)
    else true
  
  val dynamic_invariant (temp___expr_18: int) (temp___is_init_14: bool) (temp___skip_constant_15: bool) (temp___do_toplevel_16: bool) (temp___do_typ_inv_17: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_18 : int))
                      (temp___is_init_14 : bool))
                     (temp___skip_constant_15 : bool))
                    (temp___do_toplevel_16 : bool))
                   (temp___do_typ_inv_17 : bool)) }
  
  predicate default_initial_assumption (temp___expr_19: int) (temp___skip_top_level_20: bool) =
    true
  
  val default_initial_assumption (temp___expr_19: int) (temp___skip_top_level_20: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_19 : int))
                   (temp___skip_top_level_20 : bool)) }
end

module Spacecontrolsystem__num_modules
  use _gnatprove_standard.Main
  use int.Int
  
  val num_modules : int__ref
end

module Standard__integer__rep
  use Standard__integer as Standard__integer
  use _gnatprove_standard.Main
  use int.Int
  
  function to_rep (x: Standard__integer.integer) : int =
    Standard__integer.integer'int x
  
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Standard__integer.integer,
    predicate in_range = Standard__integer.in_range,
    function to_rep = to_rep
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Standard__float
  use _gnatprove_standard.Main
  use int.Int
  use _gnatprove_standard.Float32 as Float32
  
  type float__
  
  val function first : Float32.t
    ensures { result
      =
      ((Float32.neg (340282346638528859811704183484516925440.0 : Float32.t)) :
         Float32.t) }
  
  val function last : Float32.t
    ensures { result
      =
      (340282346638528859811704183484516925440.0 : Float32.t) }
  
  predicate in_range (x: Float32.t) = Float32.t'isFinite x
  
  val in_range (x: Float32.t) : bool
    ensures { result <-> (in_range (x : Float32.t)) }
  
  clone export ada__model.Static_Float32 with
    axiom .,
    type t = float__,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type float____ref = { mutable float____content : float__ }
  
  function float____ref_float____content__projection (a: float____ref) : float__ =
    a.float____content
  
  meta "model_projection" function float____ref_float____content__projection
  
  meta "inline:no" function float____ref_float____content__projection
  
  val float____havoc (x: float____ref) : unit
    writes { x }
end

module Standard__float__rep
  use Standard__float as Standard__float
  use _gnatprove_standard.Float32 as Float32
  use _gnatprove_standard.Main
  use int.Int
  clone export ada__model.Rep_Proj_Float32 with
    axiom .,
    type t = Standard__float.float__,
    predicate in_range = Standard__float.in_range
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Spacecontrolsystem__module_type
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type module_type
  
  val function first : int
    ensures { result = (0 : int) }
  
  val function last : int
    ensures { result = (3 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = module_type,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type module_type__ref = { mutable module_type__content : module_type }
  
  function module_type__ref_module_type__content__projection (a: module_type__ref) : module_type =
    a.module_type__content
  
  meta "model_projection" function module_type__ref_module_type__content__projection
  
  meta "inline:no" function module_type__ref_module_type__content__projection
  
  val module_type__havoc (x: module_type__ref) : unit
    writes { x }
end

module Spacecontrolsystem__module_type__rep
  use Spacecontrolsystem__module_type as Spacecontrolsystem__module_type
  use _gnatprove_standard.Main
  use int.Int
  clone export ada__model.Rep_Proj_Int with
    axiom .,
    type t = Spacecontrolsystem__module_type.module_type,
    predicate in_range = Spacecontrolsystem__module_type.in_range
  
  meta "model_projection" function to_rep
  
  meta "inline:no" function to_rep
end

module Spacecontrolsystem__module_record__rep
  use _gnatprove_standard.Main
  use int.Int
  use _gnatprove_standard.Float32 as Float32
  use Standard__integer as Standard__integer
  use Standard__integer__rep as Standard__integer__rep
  use Standard__float as Standard__float
  use Standard__float__rep as Standard__float__rep
  use Spacecontrolsystem__module_type as Spacecontrolsystem__module_type
  use Spacecontrolsystem__module_type__rep as Spacecontrolsystem__module_type__rep
  
  type __split_fields = {
                       rec__spacecontrolsystem__module_record__class :
                         Spacecontrolsystem__module_type.module_type;
                       rec__spacecontrolsystem__module_record__id :
                         Standard__integer.integer;
                       rec__spacecontrolsystem__module_record__mass :
                         Standard__float.float__
                       }
  
  function __split_fields_rec__spacecontrolsystem__module_record__class__projection (a: __split_fields) : 
    Spacecontrolsystem__module_type.module_type =
    a.rec__spacecontrolsystem__module_record__class
  
  meta "model_projection" function __split_fields_rec__spacecontrolsystem__module_record__class__projection
  
  meta "inline:no" function __split_fields_rec__spacecontrolsystem__module_record__class__projection
  
  function __split_fields_rec__spacecontrolsystem__module_record__id__projection (a: __split_fields) : 
    Standard__integer.integer =
    a.rec__spacecontrolsystem__module_record__id
  
  meta "model_projection" function __split_fields_rec__spacecontrolsystem__module_record__id__projection
  
  meta "inline:no" function __split_fields_rec__spacecontrolsystem__module_record__id__projection
  
  function __split_fields_rec__spacecontrolsystem__module_record__mass__projection (a: __split_fields) : 
    Standard__float.float__ =
    a.rec__spacecontrolsystem__module_record__mass
  
  meta "model_projection" function __split_fields_rec__spacecontrolsystem__module_record__mass__projection
  
  meta "inline:no" function __split_fields_rec__spacecontrolsystem__module_record__mass__projection
  
  type __split_fields__ref = {
                            mutable __split_fields__content : __split_fields
                            }
  
  function __split_fields__ref___split_fields__content__projection (a: __split_fields__ref) : __split_fields =
    __split_fields__content a
  
  meta "model_projection" function __split_fields__ref___split_fields__content__projection
  
  meta "inline:no" function __split_fields__ref___split_fields__content__projection
  
  val __split_fields__havoc (x: __split_fields__ref) : unit
    writes { x }
  
  type __rep = { __split_fields : __split_fields }
  
  function __rep___split_fields__projection (a: __rep) : __split_fields =
    __split_fields a
  
  meta "model_projection" function __rep___split_fields__projection
  
  meta "inline:no" function __rep___split_fields__projection
  
  function to_base (a: __rep) : __rep = a
  
  val to_base (a: __rep) : __rep
    ensures { result = (to_base (a : __rep)) }
  
  function of_base (a: __rep) : __rep = a
  
  val of_base (a: __rep) : __rep
    ensures { result = (of_base (a : __rep)) }
  
  predicate spacecontrolsystem__module_record__class__pred (a: __rep) = true
  
  val spacecontrolsystem__module_record__class__pred (a: __rep) : bool
    ensures { result
                <->
                (spacecontrolsystem__module_record__class__pred (a : __rep)) }
  
  val rec__spacecontrolsystem__module_record__class_ (a: __rep) : Spacecontrolsystem__module_type.module_type
    requires { spacecontrolsystem__module_record__class__pred a }
    ensures { (result
                 = ((__split_fields a).rec__spacecontrolsystem__module_record__class)) }
  
  predicate spacecontrolsystem__module_record__id__pred (a: __rep) = true
  
  val spacecontrolsystem__module_record__id__pred (a: __rep) : bool
    ensures { result
                <->
                (spacecontrolsystem__module_record__id__pred (a : __rep)) }
  
  val rec__spacecontrolsystem__module_record__id_ (a: __rep) : Standard__integer.integer
    requires { spacecontrolsystem__module_record__id__pred a }
    ensures { (result
                 = ((__split_fields a).rec__spacecontrolsystem__module_record__id)) }
  
  predicate spacecontrolsystem__module_record__mass__pred (a: __rep) = true
  
  val spacecontrolsystem__module_record__mass__pred (a: __rep) : bool
    ensures { result
                <->
                (spacecontrolsystem__module_record__mass__pred (a : __rep)) }
  
  val rec__spacecontrolsystem__module_record__mass_ (a: __rep) : Standard__float.float__
    requires { spacecontrolsystem__module_record__mass__pred a }
    ensures { (result
                 = ((__split_fields a).rec__spacecontrolsystem__module_record__mass)) }
  
  function bool_eq (a: __rep) (b: __rep) : bool =
    if ((((Spacecontrolsystem__module_type__rep.to_rep
             ((__split_fields a).rec__spacecontrolsystem__module_record__class))
            = (Spacecontrolsystem__module_type__rep.to_rep
                 ((__split_fields b).rec__spacecontrolsystem__module_record__class))) /\
           ((Standard__integer__rep.to_rep
               ((__split_fields a).rec__spacecontrolsystem__module_record__id))
              = (Standard__integer__rep.to_rep
                   ((__split_fields b).rec__spacecontrolsystem__module_record__id)))) /\
          ((Float32.eq
              (Standard__float__rep.to_rep
                 ((__split_fields a).rec__spacecontrolsystem__module_record__mass)))
             (Standard__float__rep.to_rep
                ((__split_fields b).rec__spacecontrolsystem__module_record__mass)))) then
      True
    else False
  
  val bool_eq (a: __rep) (b: __rep) : bool
    ensures { result = ((bool_eq (a : __rep)) (b : __rep)) }
end

module Spacecontrolsystem__module_record
  use export Spacecontrolsystem__module_record__rep
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type module_record = __rep
  
  val function value__size : int
  
  val function object__size : int
  
  val function alignment : int
  
  axiom value__size_axiom: (value__size >= (0 : int))
  
  axiom object__size_axiom: (object__size >= (0 : int))
  
  axiom alignment_axiom: (alignment >= (0 : int))
  
  val function spacecontrolsystem__module_record__class__first__bit : 
    int
  
  val function spacecontrolsystem__module_record__class__last__bit : 
    int
  
  val function spacecontrolsystem__module_record__class__position : int
  
  axiom spacecontrolsystem__module_record__class__first__bit_axiom:
    (spacecontrolsystem__module_record__class__first__bit >= (0 : int))
  
  axiom spacecontrolsystem__module_record__class__last__bit_axiom:
    (spacecontrolsystem__module_record__class__last__bit
       > spacecontrolsystem__module_record__class__first__bit)
  
  axiom spacecontrolsystem__module_record__class__position_axiom:
    (spacecontrolsystem__module_record__class__position >= (0 : int))
  
  val function spacecontrolsystem__module_record__id__first__bit : int
  
  val function spacecontrolsystem__module_record__id__last__bit : int
  
  val function spacecontrolsystem__module_record__id__position : int
  
  axiom spacecontrolsystem__module_record__id__first__bit_axiom:
    (spacecontrolsystem__module_record__id__first__bit >= (0 : int))
  
  axiom spacecontrolsystem__module_record__id__last__bit_axiom:
    (spacecontrolsystem__module_record__id__last__bit
       > spacecontrolsystem__module_record__id__first__bit)
  
  axiom spacecontrolsystem__module_record__id__position_axiom:
    (spacecontrolsystem__module_record__id__position >= (0 : int))
  
  val function spacecontrolsystem__module_record__mass__first__bit : 
    int
  
  val function spacecontrolsystem__module_record__mass__last__bit : int
  
  val function spacecontrolsystem__module_record__mass__position : int
  
  axiom spacecontrolsystem__module_record__mass__first__bit_axiom:
    (spacecontrolsystem__module_record__mass__first__bit >= (0 : int))
  
  axiom spacecontrolsystem__module_record__mass__last__bit_axiom:
    (spacecontrolsystem__module_record__mass__last__bit
       > spacecontrolsystem__module_record__mass__first__bit)
  
  axiom spacecontrolsystem__module_record__mass__position_axiom:
    (spacecontrolsystem__module_record__mass__position >= (0 : int))
  
  val function user_eq (a: module_record) (b: module_record) : bool
  
  val function dummy : module_record
  
  type module_record__ref = {
                           mutable module_record__content : module_record
                           }
  
  function module_record__ref_module_record__content__projection (a: module_record__ref) : module_record =
    a.module_record__content
  
  meta "model_projection" function module_record__ref_module_record__content__projection
  
  meta "inline:no" function module_record__ref_module_record__content__projection
  
  val module_record__havoc (x: module_record__ref) : unit
    writes { x }
end

module Array__Int__Spacecontrolsystem__module_record
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Spacecontrolsystem__module_record as Spacecontrolsystem__module_record
  
  function index_I1_one : int = 1 : int
  
  type component_type = Spacecontrolsystem__module_record.module_record
  
  clone export _gnatprove_standard.Array__1 with
    axiom .,
    type I1.t = int,
    predicate I1.le = Int.( <= ),
    predicate I1.lt = Int.( < ),
    predicate I1.gt = Int.( > ),
    function I1.add = Int.( + ),
    function I1.sub = Int.( - ),
    function I1.one = index_I1_one,
    type component_type = component_type
  
  function bool_eq (a: map) (a__first: int) (a__last: int) (b: map) (b__first: int) (b__last: int) : bool =
    ((if (a__first <= a__last) then
        ((b__first <= b__last) /\
           ((a__last - a__first) = (b__last - b__first)))
      else (b__first > b__last)) /\
       (forall temp___idx_163 : int.
          if ((a__first <= temp___idx_163) /\ (temp___idx_163 <= a__last)) then
            ((Spacecontrolsystem__module_record.bool_eq
                ((get a) temp___idx_163))
               ((get b) ((b__first - a__first) + temp___idx_163)))
          else true))
  
  val bool_eq (a: map) (a__first: int) (a__last: int) (b: map) (b__first: int) (b__last: int) : 
    bool
    ensures { result
      =
      ((((((bool_eq (a : map)) (a__first : int)) (a__last : int)) (b : map))
          (b__first : int))
         (b__last : int)) }
  
  axiom bool_eq_rev:
    forall a : map, b : map.
      forall a__first : int, a__last : int, b__first : int, b__last : int.
        ((((((((bool_eq b) b__first) b__last) a) a__first) a__last) = True) ->
           ((if (a__first <= a__last) then
               ((b__first <= b__last) /\
                  ((a__last - a__first) = (b__last - b__first)))
             else (b__first > b__last)) /\
              (forall temp___idx_163 : int.
                 if ((a__first <= temp___idx_163) /\
                       (temp___idx_163 <= a__last)) then
                   ((Spacecontrolsystem__module_record.bool_eq
                       ((get a) temp___idx_163))
                      ((get b) ((b__first - a__first) + temp___idx_163)))
                 else true)))
end

module Spacecontrolsystem__module_list
  use _gnatprove_standard.Main
  use int.Int
  use Array__Int__Spacecontrolsystem__module_record as Array__Int__Spacecontrolsystem__module_record
  
  val module_list : Array__Int__Spacecontrolsystem__module_record.map__ref
end

module Spacecontrolsystem__add_module_to_station__new_module
  use _gnatprove_standard.Main
  use int.Int
  use Spacecontrolsystem__module_record as Spacecontrolsystem__module_record
  
  val function new_module : Spacecontrolsystem__module_record.module_record
end

module Spacecontrolsystem__add_module_to_station__L_1__R9b
  use _gnatprove_standard.Main
  use int.Int
  
  val function r9b : int
end

module Spacecontrolsystem__add_module_to_station__L_1__i
  use _gnatprove_standard.Main
  use int.Int
  
  val i : int__ref
end

module Spacecontrolsystem__module_record___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Spacecontrolsystem__module_record as Spacecontrolsystem__module_record
  
  predicate dynamic_invariant (temp___expr_193: Spacecontrolsystem__module_record.module_record) (temp___is_init_189: bool) (temp___skip_constant_190: bool) (temp___do_toplevel_191: bool) (temp___do_typ_inv_192: bool) =
    true
  
  val dynamic_invariant (temp___expr_193: Spacecontrolsystem__module_record.module_record) (temp___is_init_189: bool) (temp___skip_constant_190: bool) (temp___do_toplevel_191: bool) (temp___do_typ_inv_192: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_193 :
                          Spacecontrolsystem__module_record.module_record))
                      (temp___is_init_189 : bool))
                     (temp___skip_constant_190 : bool))
                    (temp___do_toplevel_191 : bool))
                   (temp___do_typ_inv_192 : bool)) }
  
  predicate default_initial_assumption (temp___expr_194: Spacecontrolsystem__module_record.module_record) (temp___skip_top_level_195: bool) =
    true
  
  val default_initial_assumption (temp___expr_194: Spacecontrolsystem__module_record.module_record) (temp___skip_top_level_195: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption
                    (temp___expr_194 :
                       Spacecontrolsystem__module_record.module_record))
                   (temp___skip_top_level_195 : bool)) }
end

module Spacecontrolsystem__Tmodule_arrayD1
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  
  type tmodule_arrayD1 = <range 1 100>
  
  val function first : int
    ensures { result = (1 : int) }
  
  val function last : int
    ensures { result = (100 : int) }
  
  predicate in_range (x: int) = ((first <= x) /\ (x <= last))
  
  val in_range (x: int) : bool
    ensures { result <-> (in_range (x : int)) }
  
  clone export ada__model.Static_Discrete with
    axiom .,
    type t = tmodule_arrayD1,
    function first = first,
    function last = last,
    predicate in_range = in_range
  
  type tmodule_arrayD1__ref = {
                             mutable tmodule_arrayD1__content :
                               tmodule_arrayD1
                             }
  
  function tmodule_arrayD1__ref_tmodule_arrayD1__content__projection (a: tmodule_arrayD1__ref) : tmodule_arrayD1 =
    a.tmodule_arrayD1__content
  
  meta "model_projection" function tmodule_arrayD1__ref_tmodule_arrayD1__content__projection
  
  meta "inline:no" function tmodule_arrayD1__ref_tmodule_arrayD1__content__projection
  
  val tmodule_arrayD1__havoc (x: tmodule_arrayD1__ref) : unit
    writes { x }
end

module Spacecontrolsystem__module_array___axiom
  use _gnatprove_standard.Main
  use int.Int
  use Array__Int__Spacecontrolsystem__module_record as Array__Int__Spacecontrolsystem__module_record
  use Array__Int__Spacecontrolsystem__module_record as Array__Int__Spacecontrolsystem__module_record
  
  predicate dynamic_invariant (temp___expr_203: Array__Int__Spacecontrolsystem__module_record.map) (temp___is_init_199: bool) (temp___skip_constant_200: bool) (temp___do_toplevel_201: bool) (temp___do_typ_inv_202: bool) =
    true
  
  val dynamic_invariant (temp___expr_203: Array__Int__Spacecontrolsystem__module_record.map) (temp___is_init_199: bool) (temp___skip_constant_200: bool) (temp___do_toplevel_201: bool) (temp___do_typ_inv_202: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant
                       (temp___expr_203 :
                          Array__Int__Spacecontrolsystem__module_record.map))
                      (temp___is_init_199 : bool))
                     (temp___skip_constant_200 : bool))
                    (temp___do_toplevel_201 : bool))
                   (temp___do_typ_inv_202 : bool)) }
  
  predicate default_initial_assumption (temp___expr_205: Array__Int__Spacecontrolsystem__module_record.map) (temp___skip_top_level_206: bool) =
    true
  
  val default_initial_assumption (temp___expr_205: Array__Int__Spacecontrolsystem__module_record.map) (temp___skip_top_level_206: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption
                    (temp___expr_205 :
                       Array__Int__Spacecontrolsystem__module_record.map))
                   (temp___skip_top_level_206 : bool)) }
end

module Spacecontrolsystem__add_module_to_station__L_1
  use _gnatprove_standard.Main
  use int.Int
  
  exception L_1
end

module Standard__float___axiom
  use _gnatprove_standard.Main
  use int.Int
  use _gnatprove_standard.Float32 as Float32
  use Standard__float as Standard__float
  
  predicate dynamic_invariant (temp___expr_67: Float32.t) (temp___is_init_63: bool) (temp___skip_constant_64: bool) (temp___do_toplevel_65: bool) (temp___do_typ_inv_66: bool) =
    if ((temp___is_init_63 = True) \/
          ((Float32.le Standard__float.first) Standard__float.last)) then
      (((Standard__float.dynamic_property Standard__float.first)
          Standard__float.last)
         temp___expr_67)
    else true
  
  val dynamic_invariant (temp___expr_67: Float32.t) (temp___is_init_63: bool) (temp___skip_constant_64: bool) (temp___do_toplevel_65: bool) (temp___do_typ_inv_66: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_67 : Float32.t))
                      (temp___is_init_63 : bool))
                     (temp___skip_constant_64 : bool))
                    (temp___do_toplevel_65 : bool))
                   (temp___do_typ_inv_66 : bool)) }
  
  predicate default_initial_assumption (temp___expr_68: Float32.t) (temp___skip_top_level_69: bool) =
    true
  
  val default_initial_assumption (temp___expr_68: Float32.t) (temp___skip_top_level_69: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_68 : Float32.t))
                   (temp___skip_top_level_69 : bool)) }
end

module Spacecontrolsystem__add_module_to_station__L_1__i___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Spacecontrolsystem__add_module_to_station__L_1___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Spacecontrolsystem__module_type___axiom
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use Spacecontrolsystem__module_type as Spacecontrolsystem__module_type
  
  predicate dynamic_invariant (temp___expr_186: int) (temp___is_init_182: bool) (temp___skip_constant_183: bool) (temp___do_toplevel_184: bool) (temp___do_typ_inv_185: bool) =
    if ((temp___is_init_182 = True) \/
          (Spacecontrolsystem__module_type.first
             <= Spacecontrolsystem__module_type.last)) then
      (((Spacecontrolsystem__module_type.dynamic_property
           Spacecontrolsystem__module_type.first)
          Spacecontrolsystem__module_type.last)
         temp___expr_186)
    else true
  
  val dynamic_invariant (temp___expr_186: int) (temp___is_init_182: bool) (temp___skip_constant_183: bool) (temp___do_toplevel_184: bool) (temp___do_typ_inv_185: bool) : 
    bool
    ensures { result
                <->
                (((((dynamic_invariant (temp___expr_186 : int))
                      (temp___is_init_182 : bool))
                     (temp___skip_constant_183 : bool))
                    (temp___do_toplevel_184 : bool))
                   (temp___do_typ_inv_185 : bool)) }
  
  predicate default_initial_assumption (temp___expr_187: int) (temp___skip_top_level_188: bool) =
    true
  
  val default_initial_assumption (temp___expr_187: int) (temp___skip_top_level_188: bool) : 
    bool
    ensures { result
                <->
                ((default_initial_assumption (temp___expr_187 : int))
                   (temp___skip_top_level_188 : bool)) }
end

module Spacecontrolsystem__num_modules___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Spacecontrolsystem__module_list___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Spacecontrolsystem__add_module_to_station__new_module___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Spacecontrolsystem__Tmodule_arrayD1___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Spacecontrolsystem__add_module_to_station__L_1__R9b___axiom
  use _gnatprove_standard.Main
  use int.Int
end

module Spacecontrolsystem__add_module_to_station__subprogram_def
  use _gnatprove_standard.Main
  use int.Int
  use int.Int
  use _gnatprove_standard.Main as Main
  use _gnatprove_standard.Boolean as Boolean
  use Standard__integer as Standard__integer
  use Standard__integer___axiom as Standard__integer___axiom
  use Spacecontrolsystem__num_modules as Spacecontrolsystem__num_modules
  use Array__Int__Spacecontrolsystem__module_record as Array__Int__Spacecontrolsystem__module_record
  use Spacecontrolsystem__module_list as Spacecontrolsystem__module_list
  use Spacecontrolsystem__module_record as Spacecontrolsystem__module_record
  use Spacecontrolsystem__add_module_to_station__new_module as Spacecontrolsystem__add_module_to_station__new_module
  use Spacecontrolsystem__add_module_to_station__L_1__R9b as Spacecontrolsystem__add_module_to_station__L_1__R9b
  use Spacecontrolsystem__add_module_to_station__L_1__i as Spacecontrolsystem__add_module_to_station__L_1__i
  use Spacecontrolsystem__module_record___axiom as Spacecontrolsystem__module_record___axiom
  use Spacecontrolsystem__Tmodule_arrayD1 as Spacecontrolsystem__Tmodule_arrayD1
  use Array__Int__Spacecontrolsystem__module_record as Array__Int__Spacecontrolsystem__module_record
  use Spacecontrolsystem__module_array___axiom as Spacecontrolsystem__module_array___axiom
  use Spacecontrolsystem__add_module_to_station__L_1 as Spacecontrolsystem__add_module_to_station__L_1
  use Standard__integer___axiom as Standard__integer___axiom
  use Standard__float___axiom as Standard__float___axiom
  use Standard__integer___axiom as Standard__integer___axiom
  use Spacecontrolsystem__add_module_to_station__L_1__i___axiom as Spacecontrolsystem__add_module_to_station__L_1__i___axiom
  use Spacecontrolsystem__add_module_to_station__L_1___axiom as Spacecontrolsystem__add_module_to_station__L_1___axiom
  use Spacecontrolsystem__module_type___axiom as Spacecontrolsystem__module_type___axiom
  use Spacecontrolsystem__module_record___axiom as Spacecontrolsystem__module_record___axiom
  use Spacecontrolsystem__module_array___axiom as Spacecontrolsystem__module_array___axiom
  use Spacecontrolsystem__num_modules___axiom as Spacecontrolsystem__num_modules___axiom
  use Spacecontrolsystem__module_list___axiom as Spacecontrolsystem__module_list___axiom
  use Spacecontrolsystem__add_module_to_station__new_module___axiom as Spacecontrolsystem__add_module_to_station__new_module___axiom
  use Spacecontrolsystem__Tmodule_arrayD1___axiom as Spacecontrolsystem__Tmodule_arrayD1___axiom
  use Spacecontrolsystem__add_module_to_station__L_1__R9b___axiom as Spacecontrolsystem__add_module_to_station__L_1__R9b___axiom
  
  let def (__void_param : unit)
    requires { [#"spacecontrolsystem.ads" 51 0 0] true }
  = [@vc:divergent]
    (([@GNAT-comment:Assume dynamic invariants of inputs of the subprogram spacecontrolsystem.ads:51]
      ());
     ([#"spacecontrolsystem.ads" 51 0 0]
      assume {
        [#"spacecontrolsystem.ads" 51 0 0]
        (((((Standard__integer___axiom.dynamic_invariant
               (Spacecontrolsystem__num_modules.num_modules.int__content))
              True)
             False)
            True)
           True) });
     ([#"spacecontrolsystem.ads" 51 0 0]
      assume {
        [#"spacecontrolsystem.ads" 51 0 0]
        (((((Spacecontrolsystem__module_array___axiom.dynamic_invariant
               (Spacecontrolsystem__module_list.module_list.Array__Int__Spacecontrolsystem__module_record.map__content))
              True)
             False)
            True)
           True) });
     ([#"spacecontrolsystem.ads" 51 0 0]
      assume {
        [#"spacecontrolsystem.ads" 51 0 0]
        (((((Spacecontrolsystem__module_record___axiom.dynamic_invariant
               Spacecontrolsystem__add_module_to_station__new_module.new_module)
              True)
             False)
            True)
           True) });
     ([@GNAT-comment:Assume moved pointers in outputs of the subprogram spacecontrolsystem.ads:51]
      ());
     ([@GNAT-comment:Check for RTE in the Pre of the subprogram spacecontrolsystem.ads:51]
      ());
     ([#"spacecontrolsystem.ads" 51 0 0] ());
     ([@GNAT-comment:Assume Pre of the subprogram spacecontrolsystem.ads:51]
      ());
     ([#"spacecontrolsystem.ads" 51 0 0]
      (try
         ([#"spacecontrolsystem.adb" 83 0 0] ());
         ([@GP_Sloc:spacecontrolsystem.adb:78:7]
          [#"spacecontrolsystem.adb" 78 0 0] ());
         ([@GP_Sloc:spacecontrolsystem.adb:78:4]
          [#"spacecontrolsystem.adb" 78 0 0]
          (if (([#"spacecontrolsystem.adb" 78 0 0]
                [#"spacecontrolsystem.adb" 78 0 0]
                (([@branch_id=922] Main.spark__branch).bool__content <-
                   ((Spacecontrolsystem__num_modules.num_modules.int__content)
                      < (100 : int))));
               (([@branch_id=922] Main.spark__branch).bool__content)) then
             (([@GP_Sloc:spacecontrolsystem.adb:79:7]
               [#"spacecontrolsystem.adb" 79 0 0] ());
              ([@GP_Sloc:spacecontrolsystem.adb:79:22]
               [#"spacecontrolsystem.adb" 79 0 0] ());
              ([@GP_Sloc:spacecontrolsystem.adb:79:19]
               [#"spacecontrolsystem.adb" 79 0 0]
               [#"spacecontrolsystem.adb" 79 0 0]
               (Spacecontrolsystem__num_modules.num_modules.int__content <-
                  ([#"spacecontrolsystem.adb" 79 0 0]
                   [@comment:      Num_Modules := Num_Modules + 1;                                  ^ spacecontrolsystem.adb:79:34:VC_OVERFLOW_CHECK]
                   [@GP_Sloc:spacecontrolsystem.adb:79:34]
                   [@vc:annotation]
                   [@GP_Reason:VC_OVERFLOW_CHECK]
                   [@GP_Shape:if__num_modules_assign__add]
                   [@GP_Id:2]
                   (Standard__integer.range_check_
                      ((Spacecontrolsystem__num_modules.num_modules.int__content)
                         + (1 : int))))));
              ([@GP_Sloc:spacecontrolsystem.adb:80:7]
               [#"spacecontrolsystem.adb" 80 0 0] ());
              ([@GP_Sloc:spacecontrolsystem.adb:80:19]
               [#"spacecontrolsystem.adb" 80 0 0] ());
              ([@GP_Sloc:spacecontrolsystem.adb:80:32]
               [#"spacecontrolsystem.adb" 80 0 0]
               [#"spacecontrolsystem.adb" 80 0 0]
               (Spacecontrolsystem__module_list.module_list.Array__Int__Spacecontrolsystem__module_record.map__content <-
                  (((Array__Int__Spacecontrolsystem__module_record.set
                       (Spacecontrolsystem__module_list.module_list.Array__Int__Spacecontrolsystem__module_record.map__content))
                      (([#"spacecontrolsystem.adb" 80 0 0]
                        assert {
                          [#"spacecontrolsystem.adb" 80 0 0]
                          [#"spacecontrolsystem.adb" 80 0 0]
                          [@comment:      Module_List(Num_Modules) := New_Module;                   ^ spacecontrolsystem.adb:80:19:VC_INDEX_CHECK]
                          [@GP_Shape:if__module_list_assign__ixdcomp]
                          [@vc:annotation]
                          [@GP_Sloc:spacecontrolsystem.adb:80:19]
                          [@GP_Reason:VC_INDEX_CHECK]
                          [@GP_Id:3]
                          ((Spacecontrolsystem__Tmodule_arrayD1.first
                              <= (Spacecontrolsystem__num_modules.num_modules.int__content)) /\
                             ((Spacecontrolsystem__num_modules.num_modules.int__content)
                                <= Spacecontrolsystem__Tmodule_arrayD1.last)) });
                       (Spacecontrolsystem__num_modules.num_modules.int__content)))
                     Spacecontrolsystem__add_module_to_station__new_module.new_module))))
           else
             (([@GP_Sloc:spacecontrolsystem.adb:83:21]
               [#"spacecontrolsystem.adb" 83 0 0] ());
              ([@GP_Sloc:spacecontrolsystem.adb:83:21]
               [#"spacecontrolsystem.adb" 83 0 0]
               [#"spacecontrolsystem.adb" 83 0 0]
               ((let spacecontrolsystem__add_module_to_station__L_1__R9b__assume =
                   Spacecontrolsystem__num_modules.num_modules.int__content in
                 [#"spacecontrolsystem.adb" 83 0 0]
                 assume {
                   [#"spacecontrolsystem.adb" 83 0 0]
                   (spacecontrolsystem__add_module_to_station__L_1__R9b__assume
                      = Spacecontrolsystem__add_module_to_station__L_1__R9b.r9b) });
                ([#"spacecontrolsystem.adb" 83 0 0]
                 assume {
                   [#"spacecontrolsystem.adb" 83 0 0]
                   (((((Standard__integer___axiom.dynamic_invariant
                          Spacecontrolsystem__add_module_to_station__L_1__R9b.r9b)
                         True)
                        False)
                       True)
                      True) })));
              ([@GP_Sloc:spacecontrolsystem.adb:83:33]
               [#"spacecontrolsystem.adb" 83 0 0]
               (let temp___272 = 2 : int in
                let temp___273 =
                  Spacecontrolsystem__add_module_to_station__L_1__R9b.r9b in
                ([#"spacecontrolsystem.adb" 83 0 0]
                 (Spacecontrolsystem__add_module_to_station__L_1__i.i.int__content <-
                    temp___272));
                ([@GNAT-comment:Translation of an Ada loop from spacecontrolsystem.adb:83]
                 ());
                (if ((Boolean.andb
                        (temp___272
                           <= (Spacecontrolsystem__add_module_to_station__L_1__i.i.int__content)))
                       ((Spacecontrolsystem__add_module_to_station__L_1__i.i.int__content)
                          <= temp___273)) then
                   ([#"spacecontrolsystem.adb" 83 0 0]
                    (try
                       let temp___loop_entry_276 =
                         Spacecontrolsystem__module_list.module_list.
                           Array__Int__Spacecontrolsystem__module_record.map__content in
                       ([@GNAT-comment:While loop translating the Ada loop from spacecontrolsystem.adb:83]
                        ());
                       ([#"spacecontrolsystem.adb" 83 0 0]
                        [#"spacecontrolsystem.adb" 83 0 0]
                        (([@GNAT-comment:Check for absence of RTE in the loop invariant and variant]
                          ());
                         while True do
                           ([@GNAT-comment:gnat_ast_to_ptree: code after the loop invariant]
                            (([@GNAT-comment:Assume implicit invariants from the loop spacecontrolsystem.adb:83]
                              ());
                             ([#"spacecontrolsystem.adb" 83 0 0]
                              assume {
                                [#"spacecontrolsystem.adb" 83 0 0]
                                ((Boolean.andb
                                    ((true /\
                                        (((((Spacecontrolsystem__module_array___axiom.dynamic_invariant
                                               (Spacecontrolsystem__module_list.module_list.
                                                  Array__Int__Spacecontrolsystem__module_record.map__content))
                                              True)
                                             True)
                                            True)
                                           True)) /\
                                       (true /\ true)))
                                   (((2 : int)
                                       <= (Spacecontrolsystem__add_module_to_station__L_1__i.i.int__content)) /\
                                      ((Spacecontrolsystem__add_module_to_station__L_1__i.i.int__content)
                                         <= Spacecontrolsystem__add_module_to_station__L_1__R9b.r9b))) });
                             ([@GNAT-comment:Continuation of loop after loop invariant and variant]
                              ());
                             ([@GP_Sloc:spacecontrolsystem.adb:84:10]
                              [#"spacecontrolsystem.adb" 84 0 0] ());
                             ([@GP_Sloc:spacecontrolsystem.adb:84:32]
                              [#"spacecontrolsystem.adb" 84 0 0] ());
                             ([@GP_Sloc:spacecontrolsystem.adb:84:29]
                              [#"spacecontrolsystem.adb" 84 0 0]
                              [#"spacecontrolsystem.adb" 84 0 0]
                              (Spacecontrolsystem__module_list.module_list.
                                 Array__Int__Spacecontrolsystem__module_record.map__content <-
                                 (((Array__Int__Spacecontrolsystem__module_record.set
                                      (Spacecontrolsystem__module_list.module_list.
                                         Array__Int__Spacecontrolsystem__module_record.map__content))
                                     (let temp___275 =
                                        (Spacecontrolsystem__add_module_to_station__L_1__i.i.int__content)
                                          - (1 : int) in
                                      ([#"spacecontrolsystem.adb" 84 0 0]
                                       assert {
                                         [#"spacecontrolsystem.adb" 84 0 0]
                                         [#"spacecontrolsystem.adb" 84 0 0]
                                         [@GP_Shape:if__L_1_while__module_list_assign__ixdcomp__sub]
                                         [@vc:annotation]
                                         [@comment:         Module_List(i - 1) := Module_List(i);                        ^ spacecontrolsystem.adb:84:24:VC_INDEX_CHECK]
                                         [@GP_Reason:VC_INDEX_CHECK]
                                         [@GP_Sloc:spacecontrolsystem.adb:84:24]
                                         [@GP_Id:5]
                                         ((Spacecontrolsystem__Tmodule_arrayD1.first
                                             <= temp___275) /\
                                            (temp___275
                                               <= Spacecontrolsystem__Tmodule_arrayD1.last)) });
                                      temp___275))
                                    ((Array__Int__Spacecontrolsystem__module_record.get
                                        (Spacecontrolsystem__module_list.module_list.
                                           Array__Int__Spacecontrolsystem__module_record.map__content))
                                       (assert {
                                          [#"spacecontrolsystem.adb" 84 0 0]
                                          [@GP_Sloc:spacecontrolsystem.adb:84:44]
                                          [@vc:annotation]
                                          [@GP_Reason:VC_INDEX_CHECK]
                                          [@GP_Shape:if__L_1_while__module_list_assign__ixdcomp]
                                          [@comment:         Module_List(i - 1) := Module_List(i);                                            ^ spacecontrolsystem.adb:84:44:VC_INDEX_CHECK]
                                          [@GP_Id:4]
                                          ((Spacecontrolsystem__Tmodule_arrayD1.first
                                              <= (Spacecontrolsystem__add_module_to_station__L_1__i.i.int__content)) /\
                                             ((Spacecontrolsystem__add_module_to_station__L_1__i.i.int__content)
                                                <= Spacecontrolsystem__Tmodule_arrayD1.last)) };
                                        (Spacecontrolsystem__add_module_to_station__L_1__i.i.int__content))))));
                             ([@GNAT-comment:Check for the exit condition and loop statements appearing before the loop invariant of loop spacecontrolsystem.adb:83]
                              ());
                             (if ((Spacecontrolsystem__add_module_to_station__L_1__i.i.int__content)
                                    = temp___273) then
                                (raise Spacecontrolsystem__add_module_to_station__L_1.L_1)
                              else ());
                             ([#"spacecontrolsystem.adb" 83 0 0]
                              [#"spacecontrolsystem.adb" 83 0 0]
                              (Spacecontrolsystem__add_module_to_station__L_1__i.i.int__content <-
                                 ((Spacecontrolsystem__add_module_to_station__L_1__i.i.int__content)
                                    + (1 : int))))));
                           ([@GNAT-comment:gnat_ast_to_ptree: code before the loop invariant]
                            [@GNAT-comment:Check for absence of RTE in the loop invariant and variant]
                            ());
                           ([@GNAT-comment:gnat_ast_to_ptree: code checking the variants]
                            ())
                         done))
                     with
                       Spacecontrolsystem__add_module_to_station__L_1.L_1 ->
                       ()
                     end))
                 else ())));
              ([@GP_Sloc:spacecontrolsystem.adb:86:7]
               [#"spacecontrolsystem.adb" 86 0 0] ());
              ([@GP_Sloc:spacecontrolsystem.adb:86:19]
               [#"spacecontrolsystem.adb" 86 0 0] ());
              ([@GP_Sloc:spacecontrolsystem.adb:86:32]
               [#"spacecontrolsystem.adb" 86 0 0]
               [#"spacecontrolsystem.adb" 86 0 0]
               (Spacecontrolsystem__module_list.module_list.Array__Int__Spacecontrolsystem__module_record.map__content <-
                  (((Array__Int__Spacecontrolsystem__module_record.set
                       (Spacecontrolsystem__module_list.module_list.Array__Int__Spacecontrolsystem__module_record.map__content))
                      (([#"spacecontrolsystem.adb" 86 0 0]
                        assert {
                          [#"spacecontrolsystem.adb" 86 0 0]
                          [#"spacecontrolsystem.adb" 86 0 0]
                          [@GP_Shape:if__module_list_assign__ixdcomp]
                          [@comment:      Module_List(Num_Modules) := New_Module;                   ^ spacecontrolsystem.adb:86:19:VC_INDEX_CHECK]
                          [@vc:annotation]
                          [@GP_Reason:VC_INDEX_CHECK]
                          [@GP_Sloc:spacecontrolsystem.adb:86:19]
                          [@GP_Id:6]
                          ((Spacecontrolsystem__Tmodule_arrayD1.first
                              <= (Spacecontrolsystem__num_modules.num_modules.int__content)) /\
                             ((Spacecontrolsystem__num_modules.num_modules.int__content)
                                <= Spacecontrolsystem__Tmodule_arrayD1.last)) });
                       (Spacecontrolsystem__num_modules.num_modules.int__content)))
                     Spacecontrolsystem__add_module_to_station__new_module.new_module))))));
         (raise Return__exc)
       with Return__exc -> ()
       end)))
end
